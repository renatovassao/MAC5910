42a43,47
> /** Para usar o mkfifo() **/
> #include <sys/stat.h>
> /** Para usar o open e conseguir abrir o pipe **/
> #include <fcntl.h>
> 
60c65,79
<    
---
> 
>     /** Descritor de arquivo para o pipe **/
>     int meu_pipe_fd[2];
>     /** Nome do arquivo temporário que vai ser criado.
>      ** TODO: isso é bem arriscado em termos de segurança. O ideal é
>      ** que os nomes dos arquivos sejam criados com a função mkstemp e
>      ** essas strings sejam templates para o mkstemp. **/
>     char meu_pipe[2][27] = {"/tmp/temp.mac5910.1.XXXXXX", "/tmp/temp.mac5910.2.XXXXXX"};
>     /** Para o loop de criação dos pipes **/
>     int i;
>     /** Variável que vai contar quantos clientes estão conectados.
>      ** Necessário para saber se é o primeiro cliente ou não. **/
>     int cliente;
>     cliente = -2;
>  
66a86,93
>     /** Criando o pipe onde vou guardar as mensagens do primeiro
>      ** cliente. Esse pipe vai ser lido pelos clientes seguintes. **/
>     for (i=0;i<2;i++) {
>         if (mkfifo((const char *) meu_pipe[i],0644) == -1) {
>             perror("mkfifo :(\n");
>         }
>     }
> 
122a150,154
> 
>         /** Para identificar cada cliente. Se for o primeiro, o
>          ** funcionamento vai continuar como sendo de um cliente de echo. Se
>          ** não for, ele vai receber as mensagens do primeiro cliente **/
>         cliente++;
157,162c189,215
<             while ((n=read(connfd, recvline, MAXLINE)) > 0) {
<                 recvline[n]=0;
<                 printf("[Cliente conectado no processo filho %d enviou:] ",getpid());
<                 if ((fputs(recvline,stdout)) == EOF) {
<                     perror("fputs :( \n");
<                     exit(6);
---
>             /** Se for o primeiro cliente, continua funcionando assim
>              ** como estava antes, com a diferença de que agora, tudo que for
>              ** recebido vai ser colocado no pipe também (o novo write
>              ** no fim do while). Note que estou considerando que
>              ** terão 2 clientes conectados. O primeiro, que vai ser o cliente de echo
>              ** de fato, e o outro que só vai receber as mensagens do primeiro.
>              ** Por isso que foi adicionado um open, um write e um close abaixo.
>              ** Obs.: seria necessário um tratamento para o caso do
>              ** primeiro cliente sair. Isso está faltando aqui mas não é necessário
>              ** para o próposito desse exemplo. Além disso, precisa
>              ** revisar se esse unlink está no lugar certo. Confesso que não lembro se
>              ** é ok fazer o unlink logo depois do open. **/
>             if (cliente==-1) {
>                 meu_pipe_fd[0] = open(meu_pipe[0],O_WRONLY);
>                 meu_pipe_fd[1] = open(meu_pipe[1],O_WRONLY);
>                 unlink((const char *) meu_pipe[0]);
>                 unlink((const char *) meu_pipe[1]);
>                 while ((n=read(connfd, recvline, MAXLINE)) > 0) {
>                     recvline[n]=0;
>                     printf("[Cliente conectado no processo filho %d enviou:] ",getpid());
>                     if ((fputs(recvline,stdout)) == EOF) {
>                         perror("fputs :( \n");
>                         exit(6);
>                     }
>                     write(connfd,         recvline, strlen(recvline));
>                     write(meu_pipe_fd[0], recvline, strlen(recvline));
>                     write(meu_pipe_fd[1], recvline, strlen(recvline));
164c217,218
<                 write(connfd, recvline, strlen(recvline));
---
>                 close(meu_pipe_fd[0]);
>                 close(meu_pipe_fd[1]);
165a220,231
>             /** Se não for o primeiro cliente, passa a receber o pipe do primeiro cliente **/
>             else if (cliente==0 || cliente==1) {
>                 meu_pipe_fd[cliente] = open(meu_pipe[cliente],O_RDONLY);
>                 while ((n=read(meu_pipe_fd[cliente], recvline, MAXLINE)) > 0) {
>                     recvline[n]=0;
>                     write(connfd,         recvline, strlen(recvline));
>                 }
>                 close(meu_pipe_fd[cliente]);
>             }
>             else
>                 close(connfd);
> 
